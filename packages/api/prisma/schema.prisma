generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  email              String         @unique
  password           String
  paymentsCustomerId String?
  roles              UserRole[]     @default([])
  refreshTokens      RefreshToken[]
  deposits           Deposit[]
  assetBalances      AssetBalance[]

  @@index([roles(ops: ArrayOps)], type: Gin)
}

enum UserRole {
  Admin
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  sessionId String
  expiresAt DateTime

  @@index([expiresAt])
}

model Asset {
  id                   Int            @id @default(autoincrement())
  tickerSymbol         String         @unique
  type                 AssetType
  fullName             String
  currencySymbol       String?        @unique @db.Char(1)
  description          String?
  logoUrl              String
  tradeableBaseAssets  TradingPair[]  @relation("tradeableBaseAssets")
  tradeableQuoteAssets TradingPair[]  @relation("tradeableQuoteAssets")
  deposits             Deposit[]
  userBalances         AssetBalance[]

  @@index([type], type: Hash)
  @@index([tickerSymbol, fullName])
}

enum AssetType {
  Stock
  Crypto
  FiatMoney
}

model TradingPair {
  id           Int   @id @default(autoincrement())
  baseAssetId  Int
  baseAsset    Asset @relation("tradeableQuoteAssets", fields: [baseAssetId], references: [id])
  quoteAssetId Int
  quoteAsset   Asset @relation("tradeableBaseAssets", fields: [quoteAssetId], references: [id])

  @@unique([baseAssetId, quoteAssetId])
}

model Deposit {
  id                Int           @id @default(autoincrement())
  amount            Decimal
  status            DepositStatus @default(Pending)
  assetTickerSymbol String
  asset             Asset         @relation(fields: [assetTickerSymbol], references: [tickerSymbol])
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  transactionId     String        @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([userId, createdAt])
}

enum DepositStatus {
  Pending
  Successful
  Failed
}

model AssetBalance {
  id                Int     @id @default(autoincrement())
  amount            Decimal
  userId            Int
  user              User    @relation(fields: [userId], references: [id])
  assetTickerSymbol String
  asset             Asset   @relation(fields: [assetTickerSymbol], references: [tickerSymbol])

  @@unique([userId, assetTickerSymbol])
}
