generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  relationMode    = "foreignKeys"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  email              String         @unique
  password           String
  paymentsCustomerId String?
  roles              UserRole[]     @default([])
  refreshTokens      RefreshToken[]
  deposits           Deposit[]
  assetBalances      AssetBalance[]
  orders             Order[]

  @@index([roles(ops: ArrayOps)], type: Gin)
}

enum UserRole {
  Admin
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String
  expiresAt DateTime

  @@index([userId], type: Hash)
  @@index([expiresAt])
}

model Asset {
  id                   Int            @id @default(autoincrement())
  tickerSymbol         String         @unique
  type                 AssetType
  fullName             String
  currencySymbol       String?        @unique @db.Char(1)
  description          String?
  logoUrl              String
  tradeableBaseAssets  TradingPair[]  @relation("tradeableBaseAssets")
  tradeableQuoteAssets TradingPair[]  @relation("tradeableQuoteAssets")
  deposits             Deposit[]
  userBalances         AssetBalance[]

  @@index([type], type: Hash)
  @@index([tickerSymbol, fullName])
}

enum AssetType {
  Stock
  Crypto
  FiatMoney
}

model TradingPair {
  id                     Int     @id @default(autoincrement())
  baseAssetTickerSymbol  String
  baseAsset              Asset   @relation("tradeableQuoteAssets", fields: [baseAssetTickerSymbol], references: [tickerSymbol], onDelete: Cascade)
  quoteAssetTickerSymbol String
  quoteAsset             Asset   @relation("tradeableBaseAssets", fields: [quoteAssetTickerSymbol], references: [tickerSymbol], onDelete: Cascade)
  orders                 Order[]

  @@unique([baseAssetTickerSymbol, quoteAssetTickerSymbol])
}

model Deposit {
  id                Int           @id @default(autoincrement())
  amount            Decimal
  status            DepositStatus @default(Pending)
  assetTickerSymbol String
  asset             Asset         @relation(fields: [assetTickerSymbol], references: [tickerSymbol], onDelete: Cascade)
  userId            Int
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionId     String        @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([userId, createdAt(sort: Desc)])
  @@index([assetTickerSymbol], type: Hash)
}

enum DepositStatus {
  Pending
  Successful
  Failed
}

model AssetBalance {
  id                Int     @id @default(autoincrement())
  available         Decimal
  locked            Decimal @default(0)
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assetTickerSymbol String
  asset             Asset   @relation(fields: [assetTickerSymbol], references: [tickerSymbol], onDelete: Cascade)

  @@unique([userId, assetTickerSymbol])
}

model Order {
  id            Int         @id @default(autoincrement())
  side          OrderSide
  type          OrderType
  quantity      Decimal
  price         Decimal     @default(0)
  status        OrderStatus @default(Pending)
  orderBookId   String      @default(dbgenerated("uuid7()"))
  userId        Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradingPairId Int
  tradingPair   TradingPair @relation(fields: [tradingPairId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
  makerTrades   Trade[]     @relation("makerTrades")
  takerTrades   Trade[]     @relation("takerTrades")

  @@index([userId, createdAt(sort: Desc)])
  @@index([tradingPairId], type: Hash)
  @@index([orderBookId], type: Hash)
}

enum OrderSide {
  Buy
  Sell
}

enum OrderType {
  Market
  Limit
}

enum OrderStatus {
  Pending
  Canceled
  PartiallyFilled
  Filled
}

model Trade {
  id           Int      @id @default(autoincrement())
  price        Decimal
  quantity     Decimal
  makerOrderId Int
  makerOrder   Order    @relation("makerTrades", fields: [makerOrderId], references: [id], onDelete: Cascade)
  takerOrderId Int
  takerOrder   Order    @relation("takerTrades", fields: [takerOrderId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@index([takerOrderId], type: Hash)
  @@index([makerOrderId], type: Hash)
  @@index([createdAt(sort: Desc)])
}
